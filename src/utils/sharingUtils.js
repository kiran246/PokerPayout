import { Share } from 'react-native';
import * as Sharing from 'expo-sharing';
import * as FileSystem from 'expo-file-system';
import * as MailComposer from 'expo-mail-composer';
import * as Print from 'expo-print';
import * as Linking from 'expo-linking';

/**
 * Sharing Utilities for Poker Settlement App
 * 
 * Provides functions for sharing settlement data through various channels
 */

/**
 * Format session data as plain text for sharing
 * 
 * @param {Object} session - Session data object
 * @param {Array} players - Array of player objects for name lookup
 * @returns {string} - Formatted text
 */
export const formatSessionAsText = (session, players) => {
  const date = new Date(session.date).toLocaleDateString();
  let message = `ðŸ“Š Poker Settlement: ${date} ðŸ“Š\n\n`;
  
  // Format balances
  message += 'ðŸ’° FINAL BALANCES:\n';
  Object.entries(session.balances).forEach(([playerId, balance]) => {
    const player = players.find(p => p.id === playerId);
    const playerName = player ? player.name : 'Unknown Player';
    const numBalance = parseFloat(balance) || 0;
    const prefix = numBalance >= 0 ? '+' : '';
    message += `${playerName}: ${prefix}$${numBalance.toFixed(2)}\n`;
  });
  
  // Format settlements
  message += '\nðŸ’¸ SETTLEMENTS:\n';
  if (session.settlements && session.settlements.length > 0) {
    session.settlements.forEach((settlement, index) => {
      const fromPlayer = players.find(p => p.id === settlement.from);
      const toPlayer = players.find(p => p.id === settlement.to);
      const fromName = fromPlayer ? fromPlayer.name : 'Unknown Player';
      const toName = toPlayer ? toPlayer.name : 'Unknown Player';
      
      message += `${index + 1}. ${fromName} pays ${toName} $${settlement.amount.toFixed(2)}\n`;
    });
  } else {
    message += 'No settlements needed\n';
  }
  
  message += '\nGenerated by Poker Settlement App';
  
  return message;
};

/**
 * Format session data as HTML for email and PDF
 * 
 * @param {Object} session - Session data object
 * @param {Array} players - Array of player objects for name lookup
 * @returns {string} - HTML content
 */
export const formatSessionAsHtml = (session, players) => {
  const date = new Date(session.date).toLocaleDateString();
  
  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Poker Settlement: ${date}</title>
      <style>
        body {
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
          margin: 0;
          padding: 20px;
          color: #2C3E50;
        }
        .header {
          text-align: center;
          margin-bottom: 20px;
        }
        .title {
          font-size: 24px;
          font-weight: bold;
          color: #3498DB;
        }
        .subtitle {
          font-size: 16px;
          color: #7F8C8D;
          margin-top: 5px;
        }
        .section {
          margin-bottom: 20px;
        }
        .section-title {
          font-size: 18px;
          font-weight: bold;
          color: #2C3E50;
          border-bottom: 1px solid #E0E0E0;
          padding-bottom: 5px;
          margin-bottom: 10px;
        }
        .balance-row, .settlement-row {
          padding: 8px 0;
          border-bottom: 1px solid #F0F0F0;
        }
        .positive {
          color: #2ECC71;
        }
        .negative {
          color: #E74C3C;
        }
        .neutral {
          color: #7F8C8D;
        }
        .settlement-number {
          display: inline-block;
          width: 24px;
          height: 24px;
          background-color: #3498DB;
          color: white;
          border-radius: 12px;
          text-align: center;
          line-height: 24px;
          margin-right: 10px;
        }
        .footer {
          margin-top: 30px;
          text-align: center;
          color: #7F8C8D;
          font-size: 14px;
        }
      </style>
    </head>
    <body>
      <div class="header">
        <div class="title">Poker Settlement</div>
        <div class="subtitle">${date}</div>
      </div>
      
      <div class="section">
        <div class="section-title">Final Balances</div>
        ${Object.entries(session.balances).map(([playerId, balance]) => {
          const player = players.find(p => p.id === playerId);
          const playerName = player ? player.name : 'Unknown Player';
          const numBalance = parseFloat(balance) || 0;
          const prefix = numBalance > 0 ? '+' : '';
          const colorClass = numBalance > 0 ? 'positive' : numBalance < 0 ? 'negative' : 'neutral';
          
          return `
            <div class="balance-row">
              ${playerName}: <span class="${colorClass}">${prefix}$${numBalance.toFixed(2)}</span>
            </div>
          `;
        }).join('')}
      </div>
      
      <div class="section">
        <div class="section-title">Settlements</div>
        ${session.settlements && session.settlements.length > 0 
          ? session.settlements.map((settlement, index) => {
              const fromPlayer = players.find(p => p.id === settlement.from);
              const toPlayer = players.find(p => p.id === settlement.to);
              const fromName = fromPlayer ? fromPlayer.name : 'Unknown Player';
              const toName = toPlayer ? toPlayer.name : 'Unknown Player';
              
              return `
                <div class="settlement-row">
                  <span class="settlement-number">${index + 1}</span>
                  ${fromName} pays ${toName} <strong>$${settlement.amount.toFixed(2)}</strong>
                </div>
              `;
            }).join('')
          : '<div class="settlement-row">No settlements needed</div>'
        }
      </div>
      
      <div class="footer">
        Generated by Poker Settlement App
      </div>
    </body>
    </html>
  `;
};

/**
 * Share session via native share sheet
 * 
 * @param {Object} session - Session data object
 * @param {Array} players - Array of player objects for name lookup
 */
export const shareSession = async (session, players) => {
  try {
    const message = formatSessionAsText(session, players);
    const date = new Date(session.date).toLocaleDateString();
    
    const result = await Share.share({
      message,
      title: `Poker Settlement: ${date}`,
    });
    
    return { success: true, result };
  } catch (error) {
    console.error('Error sharing session:', error);
    return { success: false, error };
  }
};

/**
 * Send session details via email
 * 
 * @param {Object} session - Session data object
 * @param {Array} players - Array of player objects for name lookup
 * @param {Object} options - Email options
 * @param {string} options.to - Recipient email
 * @param {string} options.subject - Email subject
 * @param {boolean} options.attachPdf - Whether to attach a PDF
 */
export const emailSession = async (session, players, options = {}) => {
  try {
    // Check if email is available
    const isAvailable = await MailComposer.isAvailableAsync();
    if (!isAvailable) {
      return { 
        success: false, 
        error: 'Email is not available on this device' 
      };
    }
    
    const date = new Date(session.date).toLocaleDateString();
    const message = formatSessionAsText(session, players);
    const html = formatSessionAsHtml(session, players);
    
    // Default options
    const emailOptions = {
      to: options.to || '',
      subject: options.subject || `Poker Settlement: ${date}`,
      body: message,
      html: html,
    };
    
    // Generate PDF attachment if requested
    if (options.attachPdf) {
      const pdfUri = await generatePdf(session, players);
      if (pdfUri) {
        emailOptions.attachments = [pdfUri];
      }
    }
    
    const result = await MailComposer.composeAsync(emailOptions);
    return { success: result.status === 'sent', result };
  } catch (error) {
    console.error('Error emailing session:', error);
    return { success: false, error };
  }
};

/**
 * Generate PDF from session data
 * 
 * @param {Object} session - Session data object
 * @param {Array} players - Array of player objects for name lookup
 * @returns {string} - URI to the generated PDF file
 */
export const generatePdf = async (session, players) => {
  try {
    const html = formatSessionAsHtml(session, players);
    const date = new Date(session.date).toISOString().replace(/[:.]/g, '-');
    const { uri } = await Print.printToFileAsync({
      html,
      base64: false,
    });
    
    // Copy to a more accessible location with a better filename
    const fileInfo = await FileSystem.getInfoAsync(uri);
    const newUri = `${FileSystem.documentDirectory}poker-settlement-${date}.pdf`;
    await FileSystem.copyAsync({
      from: uri,
      to: newUri
    });
    
    return newUri;
  } catch (error) {
    console.error('Error generating PDF:', error);
    return null;
  }
};

/**
 * Share session via WhatsApp
 * 
 * @param {Object} session - Session data object
 * @param {Array} players - Array of player objects for name lookup
 * @param {string} phone - Phone number (optional)
 */
export const shareViaWhatsApp = async (session, players, phone = null) => {
  try {
    const message = encodeURIComponent(formatSessionAsText(session, players));
    let whatsappUrl = phone 
      ? `whatsapp://send?phone=${phone}&text=${message}`
      : `whatsapp://send?text=${message}`;
    
    const supported = await Linking.canOpenURL(whatsappUrl);
    
    if (!supported) {
      // Try web WhatsApp as fallback on web
      whatsappUrl = `https://web.whatsapp.com/send?text=${message}`;
      const webSupported = await Linking.canOpenURL(whatsappUrl);
      
      if (!webSupported) {
        return { 
          success: false, 
          error: 'WhatsApp is not installed on this device' 
        };
      }
    }
    
    await Linking.openURL(whatsappUrl);
    return { success: true };
  } catch (error) {
    console.error('Error sharing via WhatsApp:', error);
    
    // Fallback to generic share
    try {
      const result = await Share.share({
        message: formatSessionAsText(session, players),
        title: "Poker Settlement for WhatsApp",
      });
      return { success: true, result };
    } catch (fallbackError) {
      return { success: false, error: fallbackError };
    }
  }
};

/**
 * Create a shareable image/screenshot of settlement details
 * For future implementation - requires additional libraries
 */
export const createShareableImage = async (session, players) => {
  // This would require something like react-native-view-shot
  // Implementation will depend on the specific UI component to capture
  return { success: false, error: 'Feature not implemented yet' };
};

export default {
  formatSessionAsText,
  formatSessionAsHtml,
  shareSession,
  emailSession,
  generatePdf,
  shareViaWhatsApp,
  createShareableImage
};